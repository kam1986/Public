module DecodeCB

open Types
open Instructions
open Helper


let DecodeError (msg: string)  =
    Error $"Decoding Error:\n  {msg}"


let Decode opcode =
    let instr = 
        match opcode with
        | 0x00y | 0x01y | 0x02y | 0x03y | 0x04y | 0x05y | 0x06y | 0x07y -> 
            Get8BitLocation opcode
            |> Result.map (fun loc -> Unary(I8 I8.RLC, loc))

        | 0x08y | 0x09y | 0x0Ay | 0x0By | 0x0Cy | 0x0Dy | 0x0Ey | 0x0Fy ->
            Get8BitLocation opcode 
            |> Result.map (fun loc -> Unary(I8 I8.RRC, loc))

        | 0x10y | 0x11y | 0x12y | 0x13y | 0x14y | 0x15y | 0x16y | 0x17y ->
            Get8BitLocation opcode
            |> Result.map (fun loc -> Unary(I8 I8.RL, loc))

        | 0x18y | 0x19y | 0x1Ay | 0x1By | 0x1Cy | 0x1Dy | 0x1Ey | 0x1Fy ->
               Get8BitLocation opcode 
               |> Result.map (fun loc -> Unary(I8 I8.RR, loc))

        | 0x20y | 0x21y | 0x22y | 0x23y | 0x24y | 0x25y | 0x26y | 0x27y -> 
            Get8BitLocation opcode
            |> Result.map (fun loc -> Unary(I8 I8.SLA, loc))

        | 0x28y | 0x29y | 0x2Ay | 0x2By | 0x2Cy | 0x2Dy | 0x2Ey | 0x2Fy ->
                  Get8BitLocation opcode 
                  |> Result.map (fun loc -> Unary(I8 I8.SRA, loc)) 
    
        | 0x30y | 0x31y | 0x32y | 0x33y | 0x34y | 0x35y | 0x36y | 0x37y -> 
            Get8BitLocation opcode
            |> Result.map (fun loc -> Unary(I8 I8.SWAP, loc))

        | 0x38y | 0x39y | 0x3Ay | 0x3By | 0x3Cy | 0x3Dy | 0x3Ey | 0x3Fy ->
            Get8BitLocation opcode 
            |> Result.map (fun loc -> Unary(I8 I8.SRL, loc)) 
        
        // order of argument changed for each of pattern matching
        | 0x40y | 0x41y | 0x42y | 0x43y | 0x44y | 0x45y | 0x46y | 0x47y 
        | 0x48y | 0x49y | 0x4Ay | 0x4By | 0x4Cy | 0x4Dy | 0x4Ey | 0x4Fy 
        | 0x50y | 0x51y | 0x52y | 0x53y | 0x54y | 0x55y | 0x56y | 0x57y 
        | 0x58y | 0x59y | 0x5Ay | 0x5By | 0x5Cy | 0x5Dy | 0x5Ey | 0x5Fy 
        | 0x60y | 0x61y | 0x62y | 0x63y | 0x64y | 0x65y | 0x66y | 0x67y 
        | 0x68y | 0x69y | 0x6Ay | 0x6By | 0x6Cy | 0x6Dy | 0x6Ey | 0x6Fy 
        | 0x70y | 0x71y | 0x72y | 0x73y | 0x74y | 0x75y | 0x76y | 0x77y 
        | 0x78y | 0x79y | 0x7Ay | 0x7By | 0x7Cy | 0x7Dy | 0x7Ey | 0x7Fy ->
            Get8BitLocation opcode
            |> Result.map (fun loc -> Binary(I8 I8.BIT, loc, Imm8 (GetBits opcode)))

        | 0x80y | 0x81y | 0x82y | 0x83y | 0x84y | 0x85y | 0x86y | 0x87y 
        | 0x88y | 0x89y | 0x8Ay | 0x8By | 0x8Cy | 0x8Dy | 0x8Ey | 0x8Fy 
        | 0x90y | 0x91y | 0x92y | 0x93y | 0x94y | 0x95y | 0x96y | 0x97y 
        | 0x98y | 0x99y | 0x9Ay | 0x9By | 0x9Cy | 0x9Dy | 0x9Ey | 0x9Fy 
        | 0xA0y | 0xA1y | 0xA2y | 0xA3y | 0xA4y | 0xA5y | 0xA6y | 0xA7y 
        | 0xA8y | 0xA9y | 0xAAy | 0xABy | 0xACy | 0xADy | 0xAEy | 0xAFy
        | 0xB0y | 0xB1y | 0xB2y | 0xB3y | 0xB4y | 0xB5y | 0xB6y | 0xB7y 
        | 0xB8y | 0xB9y | 0xBAy | 0xBBy | 0xBCy | 0xBDy | 0xBEy | 0xBFy -> 
            Get8BitLocation opcode
            |> Result.map (fun loc -> Binary(I8 I8.RES, loc, Imm8 (GetBits opcode)))
            
            
        | 0xC0y | 0xC1y | 0xC2y | 0xC3y | 0xC4y | 0xC5y | 0xC6y | 0xC7y
        | 0xC8y | 0xC9y | 0xCAy | 0xCBy | 0xCCy | 0xCDy | 0xCEy | 0xCFy 
        | 0xD0y | 0xD1y | 0xD2y | 0xD3y | 0xD4y | 0xD5y | 0xD6y | 0xD7y 
        | 0xD8y | 0xD9y | 0xDAy | 0xDBy | 0xDCy | 0xDDy | 0xDEy | 0xDFy 
        | 0xE0y | 0xE1y | 0xE2y | 0xE3y | 0xE4y | 0xE5y | 0xE6y | 0xE7y 
        | 0xE8y | 0xE9y | 0xEAy | 0xEBy | 0xECy | 0xEDy | 0xEEy | 0xEFy
        | 0xF0y | 0xF1y | 0xF2y | 0xF3y | 0xF4y | 0xF5y | 0xF6y | 0xF7y 
        | 0xF8y | 0xF9y | 0xFAy | 0xFBy | 0xFCy | 0xFDy | 0xFEy | 0xFFy -> 
            Get8BitLocation opcode
            |> Result.map (fun loc -> Binary(I8 I8.SET, loc, Imm8 (GetBits opcode)))
               
    Result.map (fun instr -> instr, 2us) instr


